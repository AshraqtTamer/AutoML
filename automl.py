# -*- coding: utf-8 -*-
"""AutoMl.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1owHJDDuYme63vOKTrE6hH-UUn62wVjYd

# FLAML AutoML
"""

!pip install flaml

import pandas as pd
data=pd.read_csv('/content/USA_HousingFinal.csv')
data

x=data.drop('Price',axis=1)
y=data['Price']

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

from flaml import AutoML

automl = AutoML()
automl.fit(x_train, y_train, task="regression", time_budget=120)

print(automl.predict(x_train))
# Print the best model
print(automl.model.estimator)

"""# Lazypredict AutoMl

"""

!pip install lazypredict

import lazypredict

0# Import required libraries
from lazypredict.Supervised import LazyClassifier, LazyRegressor
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris, fetch_california_housing  # Changed load_boston to fetch_california_housing
from sklearn.metrics import mean_squared_error

# Example for classification
def lazy_classification():
    # Load dataset
    data = load_iris()
    X = data.data
    y = data.target

    # Split data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Initialize LazyClassifier
    clf = LazyClassifier(verbose=0, ignore_warnings=True, custom_metric=None)

    # Fit and predict
    models, predictions = clf.fit(X_train, X_test, y_train, y_test)
    print("Classification Models Comparison:")
    print(models)

# Example for regression
def lazy_regression():
    # Load dataset
    data = fetch_california_housing()  # Changed load_boston to fetch_california_housing
    X = data.data
    y = data.target

    # Split data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Initialize LazyRegressor
    reg = LazyRegressor(verbose=0, ignore_warnings=True, custom_metric=mean_squared_error)

    # Fit and predict
    models, predictions = reg.fit(X_train, X_test, y_train, y_test)
    print("Regression Models Comparison:")
    print(models)

# Run examples
lazy_classification()
lazy_regression()

"""## MLFLOW"""

!pip install mlflow

import mlflow
mlflow.set_tracking_uri("file:///content/mlruns")

import mlflow
from mlflow.models import infer_signature

# Tell MLflow to save logs locally
mlflow.set_tracking_uri("file:///content/mlruns")
mlflow.set_experiment("Iris_LogReg_Experiment")

# Start a run
with mlflow.start_run():
    # Log model parameters and metrics
    mlflow.log_params(params)
    mlflow.log_metric("accuracy", accuracy)
    mlflow.set_tag("model_type", "LogisticRegression")

    # Infer model signature and log model
    signature = infer_signature(X_train, lr.predict(X_train))
    mlflow.sklearn.log_model(
        sk_model=lr,
        artifact_path="iris_model",
        signature=signature,
        input_example=X_train,
        registered_model_name="iris_lr"
    )

print("MLflow run completed successfully!")

